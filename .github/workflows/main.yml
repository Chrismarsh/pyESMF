# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the stable/proj7 branch
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 0' # run every week

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MAKEFLAGS: "-j2"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.cfg.os }}

    # Conda needs a login shell so set this as the default
    # however it will cause non-conda macos python runs to fail as the wrong
    # python is picked up, see this bug report
    # https://github.com/actions/setup-python/issues/132
    # The work around is to put  the following before any shell runs
    # export PATH="$pythonLocation:$PATH"
    # however this won't fix pip so all pip invocations need to be
    # pytho -m pip
    defaults:
      run:
        shell: bash -l {0}
    
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8]
        test-conda: ["sys-python"] #"conda-python",
        esfm-version: ["8.1.1","8.2.1_beta_snapshot_03"]

        cfg:
          - { os: "ubuntu-18.04", compiler: "gcc", version: 7 }
          - { os: "ubuntu-18.04", compiler: "gcc", version: 9 }
          - { os: "ubuntu-18.04", compiler: "gcc", version: 10 }
          - { os: "ubuntu-20.04", compiler: "gcc", version: 9 }
          - { os: "ubuntu-20.04", compiler: "gcc", version: 10 }
          - { os: "macos-10.15",  compiler: "apple-clang", version: "12.0" }
          - { os: "macos-11",     compiler: "apple-clang", version: "13.0" }


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: FranzDiebold/github-env-vars-action@v2

      - name: Setup Python ${{ matrix.python-version }}
        if: ${{ matrix.test-conda  == 'sys-python' }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Conda ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        if: ${{ matrix.test-conda  == 'conda-python' }}
        with:
          activate-environment: pyesmf-env
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          export PATH="$pythonLocation:$PATH"
          python -m pip install conan --upgrade
          python -m pip install twine
          python -m pip install conan
          python -m pip install scikit-build>=0.10.0
          python -m pip install ninja
          python -m pip install wheel

      - name: Install linux dependencies
        if: startsWith( matrix.cfg.os, 'ubuntu' )
        env:
          UBUNTU_VER: ${{ matrix.cfg.os }}
        run: | 
          export PATH="$pythonLocation:$PATH"
          sudo apt-get update
          sudo apt-get upgrade

      - name: env linux
        if: startsWith( matrix.cfg.os, 'ubuntu' )
        uses: allenevans/set-env@v2.0.0
        with:
          CC: gcc-${{ matrix.cfg.version }}
          CXX: g++-${{ matrix.cfg.version }}
          GFORTRAN_NAME: gfortran-${{ matrix.cfg.version }}

      - name: env macos
        if: startsWith( matrix.cfg.os, 'macos' )
        uses: allenevans/set-env@v2.0.0
        with:
          CONAN_APPLE_CLANG_VERSIONS: ${{ matrix.cfg.version }}
          GFORTRAN_NAME: gfortran-10 # set the name to use for gfortran as we need to use gfotran-<version>
 
      - name: Set version
        uses: allenevans/set-env@v2.0.0
        with:
          ESMF_VERSION: ${{ matrix.esfm-version }}
          TEST_CONDA: ${{ matrix.test-conda }}

      - name: Setup conan
        if: ${{ matrix.use-conan == 'use-conan' }}
        run: |
          conan profile new default --detect
          conan config install https://github.com/Chrismarsh/conan-config.git
          
          if [ "$RUNNER_OS" == "Linux" ]; then
            conan profile update settings.os.distro="$CFG_OS" default
          else
            VERSION=$(echo "$CFG_OS" | cut -d'-' -f2)
            echo "MacOS $VERSION"
            if [[ "$VERSION" == "11" ]]; 
            then 
              VERSION="11.0"
            fi
            conan profile update settings.os.version="$VERSION" default
          fi
          cat ~/.conan/profiles/default
        env:
          CFG_OS: ${{matrix.cfg.os}}

      - name: Deploy
        run: |
              export PATH="$pythonLocation:$PATH"
              echo "Processing ${ESMF_VERSION} ..."
              cd "$ESMF_VERSION"

              if [ "$RUNNER_OS" = "macOS" ]; then
                python setup.py sdist #bdist_wheel
              else
                python setup.py sdist #no binary wheels on linux at the moment as we link against non PEP0513 .so
                #https://www.python.org/dev/peps/pep-0513/
              fi
              if [[ $CI_REF_NAME == "stable/"* ]]; then
                twine upload  --skip-existing dist/*
              else
                echo "Branch $CI_REF_NAME is not stable/*"
              fi

        env:
          TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
          TWINE_USERNAME: ${{secrets.TWINE_USERNAME}}
